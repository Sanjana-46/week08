name: CD - Deploy Frontend to AKS

on:
  workflow_dispatch:
    inputs:
      product_api_ip:
        description: 'External URL of Product Service (e.g., http://X.X.X.X:8000)'
        required: true
        default: 'http://<ip_address>:8000'
      order_api_ip:
        description: 'External URL of Order Service (e.g., http://Y.Y.Y.Y:8001)'
        required: true
        default: 'http://<ip_address>:8001'
      aks_cluster_name:
        description: 'AKS Cluster name'
        required: true
        default: 'sit722sj46-aks'
      aks_resource_group:
        description: 'AKS Resource Group'
        required: true
        default: 'sit722w08-sj46-rg'

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    environment: Production

    env:
      ACR_NAME: sit722sj46acr
      ACR_LOGIN_SERVER: sit722sj46acr.azurecr.io

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        run: az acr login --name "$ACR_NAME"

      - name: Inject Backend URLs into frontend/main.js
        run: |
          echo "Injecting URLs into frontend/main.js"
          if grep -q "_PRODUCT_API_URL_" frontend/main.js; then
            sed -i "s|_PRODUCT_API_URL_|${{ inputs.product_api_ip }}|g" frontend/main.js
            sed -i "s|_ORDER_API_URL_|${{ inputs.order_api_ip }}|g" frontend/main.js
          else
            sed -i "s|^const PRODUCT_API *=.*|const PRODUCT_API = \"${{ inputs.product_api_ip }}\";|g" frontend/main.js
            sed -i "s|^const ORDER_API *=.*|const ORDER_API = \"${{ inputs.order_api_ip }}\";|g" frontend/main.js
          fi
          echo "--- main.js (after) ---"
          tail -n +1 frontend/main.js

      - name: Build and Push Frontend Image
        run: |
          docker build -t "$ACR_LOGIN_SERVER/frontend:latest" ./frontend
          docker push "$ACR_LOGIN_SERVER/frontend:latest"

      - name: Set Kubernetes context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ inputs.aks_resource_group }}
          cluster-name:   ${{ inputs.aks_cluster_name }}

      - name: Deploy Frontend to AKS
        run: |
          cd k8s
          # change the filename if yours differs
          kubectl apply -f frontend.yaml

      - name: Logout from Azure
        run: az logout
